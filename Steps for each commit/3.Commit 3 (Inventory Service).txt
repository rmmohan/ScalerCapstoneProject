Inventory Service

1.  Create a new maven project with below details

    groupId: com.rv.microservices
    artifactId: inventory-service
    Name: inventory-service
    Description: Inventory Service
    packages: com.rv.microservices.inventory

    Dependencies
        Lombok
        Spring Web
        Spring Data JPA
        MySQL Driver
        Flyway Migration
        Testcontainers
        
2.  Inside inventory-service project create a file called docker-compose.yml in the root folder

    services:
      mysql:
        image: mysql:8.3.0
        container_name: mysql
        ports:
          - "3306:3306"
        environment:
          MYSQL_ROOT_PASSWORD: password@123
          MYSQL_DATABASE: inventory_service
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppassword@123
        volumes:
          - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
          - ./docker/mysql/data:/var/lib/mysql

3.  Inside the project root folder create these folders mysql and docker/mysql/data. Add a file init.sql inside mysql folder.

    CREATE DATABASE IF NOT EXISTS inventory_service;

4.  Add these details in application.properties

    spring.application.name=inventory-service

    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://localhost:3306/inventory_service
    spring.datasource.username=appuser
    spring.datasource.password=apppassword@123
    spring.jpa.hibernate.ddl-auto=none
    server.port=8082

5.  Create src/main/resources/db/migration folder to store flyway migration scripts
6.  Create V0.1.0__create_inventory inside src/main/resources/db/migration folder

    CREATE TABLE `t_inventory`
    (
        `id`          bigint(20) NOT NULL AUTO_INCREMENT,
        `sku_code`  varchar(255),
        `quantity` int(11),
        PRIMARY KEY (`id`)
    );

7.  Create V0.2.0__add_inventory.sql inside src/main/resources/db/migration folder

    INSERT INTO t_inventory (quantity, sku_code)
    VALUES
        (100, 'iphone_15'),
        (100, 'pixel_8'),
        (100, 'galaxy_24'),
        (100, 'oneplus_12');

8.  Create below java files in their respective packages

    package com.rv.microservices.inventory.model;

    import jakarta.persistence.*;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Entity
    @Table(name = "t_inventory")
    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    public class Inventory {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String skuCode;
        private Integer quantity;
    }

    package com.rv.microservices.inventory.repository;

    import com.rv.microservices.inventory.model.Inventory;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface InventoryRepository extends JpaRepository<Inventory, Long> {
        boolean existsBySkuCodeAndQuantityIsGreaterThanEqual(String skuCode, int quantity);
    }

    package com.rv.microservices.inventory.service;

    import com.rv.microservices.inventory.dto.InventoryRequest;
    import com.rv.microservices.inventory.repository.InventoryRepository;
    import lombok.RequiredArgsConstructor;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    @Service
    @RequiredArgsConstructor
    public class InventoryService {

        private final InventoryRepository inventoryRepository;

        @Transactional(readOnly = true)
        public boolean isInStock(InventoryRequest inventoryRequest) {
            return inventoryRepository.existsBySkuCodeAndQuantityIsGreaterThanEqual(inventoryRequest.skuCode(), inventoryRequest.quantity());
        }
    }

    package com.rv.microservices.inventory.controller;

    import com.rv.microservices.inventory.dto.InventoryRequest;
    import com.rv.microservices.inventory.service.InventoryService;
    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @RequestMapping("/api/inventory")
    @RequiredArgsConstructor
    public class InventoryController {

        private final InventoryService inventoryService;

        @GetMapping
        @ResponseStatus(HttpStatus.OK)
        public boolean isInStock(@RequestBody InventoryRequest inventoryRequest) {
            return inventoryService.isInStock(inventoryRequest);
        }
    }
    
    package com.rv.microservices.inventory.dto;

    import java.io.Serializable;

    public record InventoryRequest(String skuCode, Integer quantity) implements Serializable {
    }
    
9.  We will be using some thing called test containers that are very light weight containers for testing purpose. We have a list of services for which we can use test containers. Right now we are using test containers for mysql and junit tests. Hence include these dependencies in pom.xml

    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>junit-jupiter</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>mysql</artifactId>
        <scope>test</scope>
    </dependency>
    
    Note: These dependencies could have already been added when we imported test containers in maven initializer. But ensure that these tags are present.

10. We also have to add dependency for rest assured which will make rest calls. Include this dependency as well in pom.xml

    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>5.3.2</version>
    </dependency>

11. Create test container classes to write integration tests as below. Copy the below classes in their respective test packages

    package com.rv.microservices.inventory;

    import org.springframework.boot.test.context.TestConfiguration;
    import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
    import org.springframework.context.annotation.Bean;
    import org.testcontainers.containers.MySQLContainer;
    import org.testcontainers.utility.DockerImageName;

    @TestConfiguration(proxyBeanMethods = false)
    class TestcontainersConfiguration {

        @Bean
        @ServiceConnection
        MySQLContainer<?> mysqlContainer() {
            return new MySQLContainer<>(DockerImageName.parse("mysql:8.0.33"));
        }
    }

    package com.rv.microservices.inventory;

    import com.rv.microservices.inventory.dto.InventoryRequest;
    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Test;
    import io.restassured.RestAssured;
    import io.restassured.parsing.Parser;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.boot.test.web.server.LocalServerPort;
    import org.springframework.context.annotation.Import;

    import static org.junit.Assert.assertFalse;
    import static org.junit.Assert.assertTrue;

    @Import(TestcontainersConfiguration.class)
    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
    class InventoryServiceApplicationTests {

        @LocalServerPort
        private Integer port;

        @BeforeEach
        void setup() {
            RestAssured.baseURI = "http://localhost";
            RestAssured.port = port;
            RestAssured.defaultParser = Parser.JSON;
        }

        @Test
        void shouldCheckIfInventoryExists() throws Exception {
            InventoryRequest inventoryRequest = new InventoryRequest("iphone_15", 100);

            Boolean response = RestAssured.given()
                    .contentType("application/json")
                    .body(inventoryRequest)
                    .when()
                    .get("/api/inventory")
                    .then()
                    .log().all()
                    .statusCode(200)
                    .extract()
                    .as(Boolean.class);

            assertTrue(response);
        }

        @Test
        void shouldCheckIfInventoryDoesNotExist() throws Exception {
            InventoryRequest inventoryRequest = new InventoryRequest("iphone_15", 101);

            Boolean response = RestAssured.given()
                    .contentType("application/json")
                    .body(inventoryRequest)
                    .when()
                    .get("/api/inventory")
                    .then()
                    .log().all()
                    .statusCode(200)
                    .extract()
                    .as(Boolean.class);

            assertFalse(response);
        }
    }