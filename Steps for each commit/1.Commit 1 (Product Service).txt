Ecommerce Microservices Tutorial

Product Service
1.  Create a new maven project with below configuration

    groupId: com.rv.microservices
    artifactId: product-service
    Name: product-service
    Description: Product Service
    packages: com.rv.microservices.product

    Dependencies
        Lombok
        Spring Web
        Spring Data MongoDB
        Testcontainers

2.  After opening the project, run the below command to build the project:
    mvn clean verify

    This will download all necessary dependencies

3.  Start Docker
4.  Inside product-service project create a file called docker-compose.yml in the root folder

    version: '4'
    services:
      mongo:
        image: mongo:7.0.5
        container_name: mongo
        ports:
          - "27017:27017"
        environment:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: product-service
        volumes:
          - ./docker/mongodb/data:/data/db

5.  Configure the MongoDB URI Details inside the application.properties file:

    spring.data.mongodb.uri=mongodb://root:password@localhost:27017/product-service?authSource=admin

6.  Add below files in source code

    **Product.java**

    package com.rv.microservices.product.model;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.data.annotation.Id;
    import org.springframework.data.mongodb.core.mapping.Document;

    import java.math.BigDecimal;

    @Document(value = "product")
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    @Data
    public class Product {

        @Id
        private String id;
        private String name;
        private String description;
        private BigDecimal price;
    }

    **ProductRepository.java**

    package com.rv.microservices.product.repository;

    package com.rv.microservices.product.model.Product;
    import org.springframework.data.mongodb.repository.MongoRepository;

    public interface ProductRepository extends MongoRepository<Product, String> {
    }

    **ProductService.java**

    package com.rv.microservices.product.service;

    import com.rv.microservices.product.dto.ProductRequest;
    import com.rv.microservices.product.dto.ProductResponse;
    import com.rv.microservices.product.model.Product;
    import com.rv.microservices.product.repository.ProductRepository;
    import lombok.RequiredArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    @RequiredArgsConstructor
    @Slf4j
    public class ProductService {

        private final ProductRepository productRepository;

        public void createProduct(ProductRequest productRequest) {
            Product product = Product.builder()
                    .name(productRequest.name())
                    .description(productRequest.description())
                    .price(productRequest.price())
                    .build();

            productRepository.save(product);
            log.info("Product {} is saved", product.getId());
        }

        public List<ProductResponse> getAllProducts() {
            List<Product> products = productRepository.findAll();

            return products.stream().map(this::mapToProductResponse).toList();
        }

        private ProductResponse mapToProductResponse(Product product) {
            return new ProductResponse(product.getId(), product.getName(),
                    product.getDescription(), product.getPrice());
        }
    }

    **ProductController.java**

    package com.rv.microservices.product.controller;

    import com.rv.microservices.product.dto.ProductRequest;
    import com.rv.microservices.product.dto.ProductResponse;
    import com.rv.microservices.product.service.ProductService;
    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/api/product")
    @RequiredArgsConstructor
    public class ProductController {

        private final ProductService productService;

        @PostMapping
        @ResponseStatus(HttpStatus.CREATED)
        public void createProduct(@RequestBody ProductRequest productRequest) {
            productService.createProduct(productRequest);
        }

        @GetMapping
        @ResponseStatus(HttpStatus.OK)
        public List<ProductResponse> getAllProducts() {
            return productService.getAllProducts();
        }
    }

    **ProductRequest.java**

    package com.rv.microservices.product.dto;

    import java.math.BigDecimal;

    public record ProductRequest(String name, String description, BigDecimal price) {
    }

    **ProductResponse.java**

    package com.rv.microservices.product.dto;

    import java.math.BigDecimal;

    public record ProductResponse(String id, String name, String description, BigDecimal price) {
    }

7.  We will be using some thing called test containers that are very light weight containers for testing purpose. We have a list of services for which we can use test containers. Right now we are using test containers for mongodb and junit tests. Hence include these dependencies in pom.xml

    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>junit-jupiter</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>mongodb</artifactId>
        <scope>test</scope>
    </dependency>

8.  We also have to add dependency for rest assured which will make rest calls. Include this dependency as well in pom.xml

    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>5.3.2</version>
    </dependency>

9. Add the below test case which will create a product and test if the product was added successfully

    package com.rv.microservices.product;

    import com.rv.microservices.product.dto.ProductRequest;
    import com.rv.microservices.product.dto.ProductResponse;
    import io.restassured.RestAssured;
    import io.restassured.parsing.Parser;
    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Test;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.boot.test.web.server.LocalServerPort;
    import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
    import org.testcontainers.containers.MongoDBContainer;

    import java.math.BigDecimal;
    import java.util.List;

    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
    class ProductServiceApplicationTests {

        @ServiceConnection
        static MongoDBContainer mongoDBContainer = new MongoDBContainer("mongo:7.0.7");
        @LocalServerPort
        private Integer port;

        @BeforeEach
        void setup() {
            RestAssured.baseURI = "http://localhost";
            RestAssured.port = port;
            RestAssured.defaultParser = Parser.JSON;
        }

        static {
            mongoDBContainer.start();
        }

        @Test
        void shouldCreateProduct() throws Exception {
            ProductRequest productRequest = getProductRequest();

            RestAssured.given()
                    .contentType("application/json")
                    .body(productRequest)
                    .when()
                    .post("/api/product")
                    .then()
                    .log().all()
                    .statusCode(201);
        }

        @Test
        void shouldGetAllProducts() {
            ProductRequest productRequest = getProductRequest();

            List<ProductResponse> products = RestAssured.given()
                    .get("/api/product")
                    .then()
                    .statusCode(200)
                    .extract()
                    .body()
                    .jsonPath()
                    .getList(".", ProductResponse.class);

            // Verify list size and name
            org.junit.jupiter.api.Assertions.assertEquals(1, products.size());
            org.junit.jupiter.api.Assertions.assertEquals(productRequest.name(), products.get(0).name());
            org.junit.jupiter.api.Assertions.assertEquals(productRequest.description(), products.get(0).description());
            org.junit.jupiter.api.Assertions.assertEquals(productRequest.price().intValueExact(), products.get(0).price().intValueExact());
        }

        private ProductRequest getProductRequest() {
            return new ProductRequest("iPhone 13", "iPhone 13", BigDecimal.valueOf(1200));
        }
    }