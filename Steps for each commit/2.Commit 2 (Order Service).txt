Order Service

1.  Create a new maven project with below details

    groupId: com.rv.microservices
    artifactId: order-service
    Name: order-service
    Description: Order Service
    packages: com.rv.microservices.order

    Dependencies
        Lombok
        Spring Web
        Spring Data JPA
        MySQL Driver
        Flyway Migration
        Testcontainers

2.  Inside order-service project create a file called docker-compose.yml in the root folder

    services:
      mysql:
        image: mysql:8.3.0
        container_name: mysql
        ports:
          - "3306:3306"
        environment:
          MYSQL_ROOT_PASSWORD: password@123
          MYSQL_DATABASE: inventory_service
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppassword@123
        volumes:
          - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
          - ./docker/mysql/data:/var/lib/mysql

3.  Inside the project root folder create these folders mysql and docker/mysql/data. Add a file init.sql inside mysql folder.
    
    CREATE DATABASE IF NOT EXISTS order_service;

4.  Add these details in application.properties

    spring.application.name=order-service

    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://localhost:3306/order_service
    spring.datasource.username=appuser
    spring.datasource.password=apppassword@123
    spring.jpa.hibernate.ddl-auto=none
    server.port=8081

5.  Create src/main/resources/db/migration folder to store flyway migration scripts
6.  Create V1__init.sql inside src/main/resources/db/migration folder

    CREATE TABLE `t_orders`
    (
        `id`          bigint(20) NOT NULL AUTO_INCREMENT,
        `order_number` varchar(255) DEFAULT NULL,
        `sku_code`  varchar(255),
        `price`    decimal(19, 2),
        `quantity` int(11),
        PRIMARY KEY (`id`)
    );

7.  Create below java files in their respective packages

    package com.rv.microservices.order.model;

    import jakarta.persistence.*;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.math.BigDecimal;

    @Entity
    @Table(name = "t_orders")
    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class Order {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String orderNumber;
        private String skuCode;
        private BigDecimal price;
        private Integer quantity;
    }

    package com.rv.microservices.order.repository;

    import com.rv.microservices.order.model.Order;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface OrderRepository extends JpaRepository<Order, Long> {
    }

    package com.rv.microservices.order.service;

    import com.rv.microservices.order.dto.OrderRequest;
    import com.rv.microservices.order.model.Order;
    import com.rv.microservices.order.repository.OrderRepository;
    import lombok.RequiredArgsConstructor;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.UUID;

    @Service
    @RequiredArgsConstructor
    @Transactional
    public class OrderService {

        private final OrderRepository orderRepository;

        public void placeOrder(OrderRequest orderRequest) {
            var order = mapToOrder(orderRequest);
            orderRepository.save(order);
        }

        private static Order mapToOrder(OrderRequest orderRequest) {
            Order order = new Order();
            order.setOrderNumber(UUID.randomUUID().toString());
            order.setPrice(orderRequest.price());
            order.setQuantity(orderRequest.quantity());
            order.setSkuCode(orderRequest.skuCode());
            return order;
        }
    }

    package com.rv.microservices.order.controller;

    import com.rv.microservices.order.dto.OrderRequest;
    import com.rv.microservices.order.service.OrderService;
    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @RequestMapping("/api/order")
    @RequiredArgsConstructor
    public class OrderController {

        private final OrderService orderService;

        @PostMapping
        @ResponseStatus(HttpStatus.CREATED)
        public String placeOrder(@RequestBody OrderRequest orderRequest) {
            orderService.placeOrder(orderRequest);
            return "Order Placed Successfully";
        }
    }

    package com.rv.microservices.order.dto;

    import java.math.BigDecimal;

    public record OrderRequest(String skuCode, BigDecimal price, Integer quantity) {
    }

8.  We will be using some thing called test containers that are very light weight containers for testing purpose. We have a list of services for which we can use test containers. Right now we are using test containers for mysql and junit tests. Hence include these dependencies in pom.xml

    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>junit-jupiter</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>mysql</artifactId>
        <scope>test</scope>
    </dependency>
    
    Note: These dependencies could have already been added when we imported test containers in maven initializer. But ensure that these tags are present.

9.  We also have to add dependency for rest assured which will make rest calls. Include this dependency as well in pom.xml

    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>5.3.2</version>
    </dependency>

10. Create test container classes to write integration tests as below. Copy the below classes in their respective test packages

    package com.rv.microservices.order;

    import org.springframework.boot.test.context.TestConfiguration;
    import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
    import org.springframework.context.annotation.Bean;
    import org.testcontainers.containers.MySQLContainer;
    import org.testcontainers.utility.DockerImageName;

    @TestConfiguration(proxyBeanMethods = false)
    class TestcontainersConfiguration {

        @Bean
        @ServiceConnection
        MySQLContainer<?> mysqlContainer() {
            return new MySQLContainer<>(DockerImageName.parse("mysql:8.0.33"));
        }
    }

    package com.rv.microservices.order;

    import com.rv.microservices.order.dto.OrderRequest;
    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Test;
    import io.restassured.RestAssured;
    import io.restassured.parsing.Parser;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.boot.test.web.server.LocalServerPort;
    import org.springframework.context.annotation.Import;

    import java.math.BigDecimal;

    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
    @Import(TestcontainersConfiguration.class)
    class OrderServiceApplicationTests {

        @LocalServerPort
        private Integer port;

        @BeforeEach
        void setup() {
            RestAssured.baseURI = "http://localhost";
            RestAssured.port = port;
            RestAssured.defaultParser = Parser.JSON;
        }

        @Test
        void shouldCreateOrder() throws Exception {
            OrderRequest orderRequest = getOrderRequest();

            RestAssured.given()
                    .contentType("application/json")
                    .body(orderRequest)
                    .when()
                    .post("/api/order")
                    .then()
                    .log().all()
                    .statusCode(201);
        }

        private OrderRequest getOrderRequest() {
            return new OrderRequest("sku1234", BigDecimal.valueOf(1200), 1);
        }
    }